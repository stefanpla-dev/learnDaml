module IterativeExample where

import Daml.Script

--since variables are immutable in Daml, we can't use structures like a for or while loop as values of variables can't change iteratively. But, there are other options to achieve something similar.

fibonacci: Int -> Int
fibonacci n 
    | n <= 2 = 1
    | otherwise = fibonacci (n-2) + fibonacci (n-1) -- recursive version of iteration.

moduloUsingMap: [Int] -> Int -> [Int]
moduloUsingMap x y = map (% y) x -- mapping approach

sumList: [Int] -> Int
sumList x = foldl (+) 0 x

listToText: [Int] -> Text
listToText x = foldl (\acc y -> acc <> show y) "" x --folding approach


testFibonacci: Script ()
testFibonacci = script do
    debug $ fibonacci 7

    debug $ moduloUsingMap [14,15,19,20] 3
